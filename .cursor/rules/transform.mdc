---
description: 
globs: 
alwaysApply: false
---
# Prompt: Convert Figma Tailwind HTML to a Structured Deco.cx Website

## Persona:
Act as an expert Deco.cx Senior Frontend Developer with deep knowledge of the Deco.cx platform, Preact, Fresh, TypeScript, and Tailwind CSS. Your primary goal is to convert raw HTML with Tailwind classes (potentially containing static pixel values from a Figma export) into a robust, maintainable, and performant Deco.cx website.

## Core Task:
Analyze the provided HTML code snippet, which represents a webpage design exported from Figma using Tailwind CSS. Transform this raw HTML into a functional Deco.cx website structure, adhering strictly to Deco.cx principles and best practices.

## Input:
The input will be a single block of HTML code containing Tailwind CSS classes. This code might include:
-   Non-standard Tailwind classes with static pixel values (e.g., `w-[43px]`, `mt-[17px]`, `h-[101px]`).
-   A flat structure without clear semantic separation of sections or components.
-   Potentially broken or suboptimal Tailwind usage.

## Requirements & Transformation Steps:

1.  **Documentation Adherence:**
    *   Your response MUST be based **entirely** on the principles, patterns, and best practices outlined in the official Deco.cx documentation (conceptually equivalent to the content starting from @deco.cx docs and its related pages).
    *   Adhere strictly to Deco.cx conventions for creating Sections, Components, Loaders, Props, and utilizing Islands for interactivity.

2.  **Tailwind CSS Cleanup and Standardization:**
    *   Identify static pixel values within Tailwind classes (e.g., `w-[43px]`, `h-[101px]`, `mt-[17px]`).
    *   Replace these static values with the **closest standard Tailwind utility class** based on the default spacing and sizing scale (e.g., `w-11`, `h-24`, `mt-4`). Use your knowledge of the standard Tailwind scale.
    *   If an exact standard class match isn't available, choose the nearest standard value. Add a comment `{/* Closest standard class used */}` if the match isn't perfect but is the best standard fit.
    *   Refactor any potentially inefficient or non-standard Tailwind usage into conventional classes.

3.  **Structure into Deco.cx Sections:**
    *   Analyze the HTML structure and visual layout implied by the classes.
    *   Divide the page content logically into distinct **Deco.cx Sections**. Each section should represent a major thematic or structural block of the page (e.g., Hero, Features, Testimonials, CTA, Footer).
    *   Generate the code for each Section as a separate `.tsx` file/component, following Deco.cx conventions. Define appropriate `Props` for each Section using strictly-typed TypeScript interfaces with clear JSDoc comments (⁠@description, ⁠@format) to allow customization via the Deco admin panel. Provide sensible default values for props directly in the function signature.

4.  **Identify and Create Reusable Components:**
    *   Scan the HTML for repeating UI patterns or elements that should be reusable (e.g., Buttons, Cards, Headings, Icons, Input Fields, Eyebrows/Badges).
    *   Extract these patterns into separate, reusable **Deco.cx Components** (`.tsx` files).
    *   Define clear TypeScript `Props` interfaces for each component with clear JSDoc comments (⁠@description, ⁠@format) to handle variations (e.g., button text, card image URL, heading level). Provide sensible default values for props directly in the function signature.
    *   Use these Components within the Sections you created.

5.  **Implement Interactivity with Islands:**
    *   Identify elements requiring client-side interactivity (e.g., image carousels, dropdowns, counters, interactive forms).
    *   Wrap these interactive components or the smallest possible parent requiring interactivity in **Deco.cx Islands** (`.tsx` files named typically ending in `.Island.tsx`).
    *   Keep Islands as small as possible to minimize client-side JavaScript.

6.  **Ensure Responsiveness:**
    *   Apply Tailwind CSS responsive modifiers (e.g., `sm:`, `md:`, `lg:`, `xl:`) appropriately throughout the Sections and Components to ensure the layout adapts gracefully to different screen sizes (mobile, tablet, desktop).
    *   Prioritize a mobile-first approach where applicable. Ensure text scales, grids reflow, and images resize correctly.

7. **Add Animations with GSAP**   
    *   Enhance the user experience by incorporating animations using the GSAP (GreenSock Animation Platform) library. Leverage its core features and potentially plugins like ⁠ScrollTrigger for scroll-based animations.
    *   Crucially: Any component or element whose animation is controlled by GSAP MUST be implemented within or managed by a Deco.cx Island (⁠.Island.tsx file), as GSAP executes on the client-side.
    *   Within your Island components:
    *   Import ⁠gsap and any necessary plugins (e.g., ⁠import { gsap } from "gsap";, ⁠import { ScrollTrigger } from "gsap/ScrollTrigger";).
    *   If using ⁠ScrollTrigger, register the plugin early (e.g., ⁠gsap.registerPlugin(ScrollTrigger);).
    *   Use Preact's ⁠useRef hook to get direct references to the DOM elements you intend to animate.
    *   Implement the GSAP animation logic within a Preact ⁠useEffect hook.
    *   Use an empty dependency array (⁠useEffect(() => { /* animation setup */ }, []);) for animations that run once when the component mounts.
    *   Include dependencies if the animation needs to re-run based on prop changes.
    *   Ensure proper cleanup for persistent animations (like ScrollTriggers) within the ⁠useEffect's return function to prevent memory leaks when the component unmounts (e.g., ⁠return () => { ScrollTrigger.getAll().forEach(t => t.kill()); };).
    *   Apply GSAP for common animation patterns:
    *   Enter animations: Use ⁠gsap.from() or ⁠gsap.fromTo() for fade-in, slide-in, or stagger effects as elements appear (potentially triggered by ⁠ScrollTrigger).
    *   Scroll-triggered effects: Parallax backgrounds, element reveals, progress indicators using ⁠ScrollTrigger.
    *   Micro-interactions: Subtle animations on hover or click events (can sometimes be handled by CSS transitions, but GSAP offers more control).
    *   Ensure animations are smooth, performant (be mindful of layout shifts and paint costs), and enhance the user experience without being distracting. Apply animations thoughtfully, primarily within Islands.

8. **Handle SVGs: Logos vs. Icons (Material Design):**
    *   Identify Logos: If the input HTML contains complex SVGs or ⁠<img/> tags clearly representing a brand logo:
    *   Do not embed the raw SVG directly into the component code.
    *   Instead, replace it with a standard ⁠Image component (or create a simple ⁠Logo component) that accepts an ⁠ImageWidget prop (e.g., ⁠import type { ImageWidget } from "apps/admin/widgets.ts";).
    *   This allows the logo image file to be uploaded and managed via the Deco Admin Panel. Define the ⁠Props interface accordingly (e.g., ⁠logo: ImageWidget). Add appropriate ⁠alt text props as well.
    *   Identify and Standardize Icons: If the input HTML contains small, simple SVGs acting as icons (e.g., arrows, user symbols, menu icons):
    *   Replace these SVGs with a dedicated, reusable ⁠Icon component.
    *   This ⁠Icon component must source its icons from the Material Design Icons library.
    *   The ⁠Icon component should accept at least the following props:
    *   ⁠id: A string representing the specific Material Design icon name (e.g., ⁠"arrow_forward", ⁠"menu", ⁠"shopping_cart"). You might need to infer the correct Material Design icon based on the visual representation of the input SVG.
    *   ⁠size: A number (e.g., ⁠24) to control the width and height.
    *   ⁠strokeWidth (Optional): A number for icons with strokes.
    *   Additional Tailwind classes can be passed via a ⁠class or similar prop for custom styling (like color).
    *   Generate the structure for this ⁠Icon.tsx component. While you don't need to include the entire Material Design SVG sprite sheet, show how it would dynamically render the correct SVG based on the ⁠id prop (perhaps using a placeholder comment like ⁠{/* Logic to render Material Design SVG based on id goes here */}).
    *   Use the ⁠Icon component: Wherever an icon was identified, use ⁠<Icon id="icon_name" size={24} ... /> within your Sections and other Components.

9.  **Code Quality and Output:**
    *   Generate clean, well-formatted, and commented TypeScript (`.tsx`) code.
    *   Ensure all generated code is functional and adheres to Preact/JSX syntax.
    *   Clearly separate the code for each Section, Component, and Island. Use Markdown code blocks with appropriate language identifiers (`tsx`).
    *   Define props using TypeScript interfaces for type safety and Deco.cx admin integration.

## Example Input (Illustrative):

```html
<!-- Example of potential input -->
<div class="flex flex-col items-center bg-[#F0F0F0] p-[20px]">
  <h1 class="text-[32px] font-bold mb-[15px]">My Awesome Product</h1>
  <p class="text-center w-[300px] mb-[25px]">This is a description of the product, it is very cool.</p>
  <button class="bg-[#007AFF] text-white p-[10px] rounded-[5px] w-[120px]">Buy Now</button>
</div>
```

## Expected Output Structure:

Provide the code for each identified Section and Component separately. For example:

```markdown
### Section: HeroSection.tsx

```tsx
import { Head } from "$fresh/runtime.ts";
import type { SectionProps } from "deco/mod.ts"; // Or appropriate import path
import Button, { Props as ButtonProps } from "../components/ui/Button.tsx";
import Heading, { Props as HeadingProps } from "../components/ui/Heading.tsx";

export interface Props {
  title?: HeadingProps;
  description?: string;
  button?: ButtonProps;
  // Add other props as needed
}

export default function HeroSection({ title, description, button }: SectionProps<Props>) {
  return (
    <div class="container px-4 py-8 mx-auto lg:px-8 lg:py-12 flex flex-col items-center text-center bg-gray-100">
       {/* Use Heading component */}
       {title && <Heading {...title} />}

       {description && <p class="mt-4 max-w-md">{description}</p>}

       {/* Use Button component */}
       {button && (
          <div class="mt-6">
             <Button {...button} />
          </div>
       )}
    </div>
  );
}

// Example of Loader function if needed for this section
// export const loader = (props: Props, req: Request) => { ... }
```

### Component: ui/Heading.tsx

```tsx
import type { HTMLWidget } from "apps/admin/widgets.ts"; // For rich text potentially

export interface Props {
   /**
   * @format html
   */
  text: HTMLWidget; // Or string if simple text
  level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
  // Add other style props if needed (e.g., color, alignment)
}

export default function Heading({ text = "Default Heading", level = "h1" }: Props) {
  const Tag = level;
  return (
     // Standardized Tailwind classes, potentially derived from props
     <Tag class="text-3xl lg:text-4xl font-bold text-gray-800" dangerouslySetInnerHTML={{ __html: text }} />
     // Or if text is string: <Tag class="...">{text}</Tag>
  );
}
```

### Component: ui/Button.tsx

```tsx
import type { AvailableIcons } from "../components/ui/Icon.tsx"; // Assuming an Icon component exists
import Icon from "../components/ui/Icon.tsx";

export interface Props {
  text: string;
  href?: string; // URL for links
  variant?: "primary" | "secondary" | "outline";
  size?: "sm" | "md" | "lg";
  iconId?: AvailableIcons;
  iconPosition?: "left" | "right";
  // Add other common button props: onClick, disabled, etc.
  // Use Island for client-side interactions like complex onClick logic
}

export default function Button({
  text = "Click Me",
  href,
  variant = "primary",
  size = "md",
  iconId,
  iconPosition = "left",
}: Props) {
  const Tag = href ? "a" : "button"; // Render as link or button

  // Base classes + variant classes + size classes + animation classes
  const baseClasses = "inline-flex items-center justify-center font-medium rounded transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2";

  const variantClasses = {
    primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
    secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-400",
    outline: "border border-blue-600 text-blue-600 hover:bg-blue-50 focus:ring-blue-500",
  };

  const sizeClasses = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-base", // Default size
    lg: "px-6 py-3 text-lg",
  };

  const finalClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`;

  return (
    <Tag href={href} class={finalClasses}>
      {iconId && iconPosition === "left" && <Icon id={iconId} size={20} class="mr-2" />}
      {text}
      {iconId && iconPosition === "right" && <Icon id={iconId} size={20} class="ml-2" />}
    </Tag>
  );
}
```

---
